#!/bin/bash
#
#



. ~/.bash_profile

#MRDDX_HEAPSIZE
#MRDDX_HOME
#MRDDX_OPTS



cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done


# get arguments
COMMAND=mrddx
shift

# some directories
THIS_DIR=`dirname "$THIS"`
MRDDX_HOME=`cd "$THIS_DIR/.." ; pwd`

echo MRDDX_HOME=$MRDDX_HOME

# some Java parameters
if [ "$NUTCH_JAVA_HOME" != "" ]; then
  #echo "run java in $NUTCH_JAVA_HOME"
  JAVA_HOME=$NUTCH_JAVA_HOME
fi
  
if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi


# MRDDX_JOB 
if [ -f ${MRDDX_HOME}/*mrddx*.job ]; then
    local=false
  for f in $MRDDX_HOME/*mrddx*.job; do
    MRDDX_JOB=$f;
  done
else
  local=true
fi

# cygwin path translation
if $cygwin; then
  MRDDX_JOB=`cygpath -p -w "$MRDDX_JOB"`
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m 

CLASSPATH=$CLASSPATH:$MRDDX_HOME
# check envvars which might override default args
if [ "$MRDDX_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $MRDDX_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$MRDDX_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# so that filenames w/ spaces are handled correctly in loops below
IFS=

# add libs to CLASSPATH
if $local; then
  for f in $MRDDX_HOME/lib/*.jar; do
   CLASSPATH=${CLASSPATH}:$f;
  done
  # local runtime
  # add plugins to classpath
  if [ -d "$MRDDX_HOME/plugins" ]; then
     CLASSPATH=${MRDDX_HOME}:${CLASSPATH}
  fi
fi

# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
fi

# setup 'java.library.path' for native-hadoop code if necessary
# used only in local mode 
JAVA_LIBRARY_PATH=''
if [ -d "${MRDDX_HOME}/lib/native" ]; then
  JAVA_PLATFORM=`CLASSPATH=${CLASSPATH} ${JAVA} org.apache.hadoop.util.PlatformName | sed -e 's/ /_/g'`
  
  if [ -d "${MRDDX_HOME}/lib/native" ]; then
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
      JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:${MRDDX_HOME}/lib/native/${JAVA_PLATFORM}
    else
      JAVA_LIBRARY_PATH=${MRDDX_HOME}/lib/native/${JAVA_PLATFORM}
    fi
  fi
fi

if [ $cygwin = true -a "X${JAVA_LIBRARY_PATH}" != "X" ]; then
  JAVA_LIBRARY_PATH=`cygpath -p -w "$JAVA_LIBRARY_PATH"`
fi

# restore ordinary behaviour
unset IFS

# default log directory & file
if [ "$NUTCH_LOG_DIR" = "" ]; then
  NUTCH_LOG_DIR="$MRDDX_HOME/logs"
fi
if [ "$NUTCH_LOGFILE" = "" ]; then
  NUTCH_LOGFILE='hadoop.log'
fi

#Fix log path under cygwin
if $cygwin; then
  NUTCH_LOG_DIR=`cygpath -p -w "$NUTCH_LOG_DIR"`
fi

 

if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  MRDDX_OPTS="$MRDDX_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi

# figure out which class to run
if [ "$COMMAND" = "mrddx" ] ; then
CLASS=com.ery.hadoop.mrddx.example.jdbc.DBRequestJob
else
CLASS=$COMMAND
fi


if $local; then
 # fix for the external Xerces lib issue with SAXParserFactory
 MRDDX_OPTS="-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl $MRDDX_OPTS"
 EXEC_CALL="$JAVA $JAVA_HEAP_MAX $MRDDX_OPTS -classpath $CLASSPATH"
else
 # check that hadoop can be found on the path
 if [ $(which hadoop | wc -l ) -eq 0 ]; then
    echo "Can't find Hadoop executable. Add HADOOP_HOME/bin to the path or run in local mode."
    exit -1;
 fi
 # distributed mode
 EXEC_CALL="hadoop jar $MRDDX_JOB"
fi

# run it

echo " $EXEC_CALL $CLASS $@"
exec $EXEC_CALL $CLASS "$@"

